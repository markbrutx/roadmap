// Что такое "event loop" в JavaScript?

// Ивент луп это у нас повар
// Ингредиенты - это таски
// Некоторые задачи повар может сделать сразу 
// Например помыть овощи
// А некоторые требуют времени 
// например пожарить мясо (занимает время)

// Пока повар жарит мясо он может помыть овощи


console.log("Start");

setTimeout(() => {
  console.log("Timeout 1");
}, 0);

setTimeout(() => {
  console.log("Timeout 2");
}, 0);


console.log("End");

















// Устный ответ: Event loop - это механизм в JavaScript, 
// который позволяет асинхронно обрабатывать события и операции, 
// используя стек вызовов и очередь событий.


// В этом примере у нас есть две функции setTimeout, 
// каждая из которых устанавливает таймер на 0 миллисекунд. 
// Обычно мы ожидали бы, что оба таймера выполнятся сразу после строки "End", 
// но на самом деле это не происходит.

// Start
// End
// Timeout 1
// Timeout 2


// Почему так происходит?

// В JavaScript существует механизм "event loop", 
// который отвечает за обработку асинхронных операций.
// Когда выполняется код, все асинхронные операции, 
// такие как setTimeout, 
// добавляются в очередь событий, 
// а не выполняются немедленно.

// Поэтому в нашем примере, когда первый setTimeout 
// добавляется в очередь событий с таймером 0 миллисекунд, 
// он не выполняется немедленно. 
// Затем второй setTimeout также добавляется в очередь событий.

// После завершения синхронного кода, "event loop" начинает обрабатывать очередь событий. 
// Он выполняет все операции, 
// которые были добавлены в очередь, 
// в порядке их добавления.
// В нашем случае, это означает, 
// что оба setTimeout будут выполнены после строки "End",
// хотя мы установили таймер на 0 миллисекунд.

// Таким образом, "event loop" в JavaScript управляет порядком выполнения асинхронных операций
// и позволяет сценариям с несколькими асинхронными задачами выполняться плавно и отзывчиво.
